Given a n*m matrix, find the maximum length path (starting from any cell) such that all cells along the path are in strictly increasing order.

We can move in 4 directions from a given cell (i, j), i.e., we can move to (i+1, j) or (i, j+1) or (i-1, j) or (i, j-1).
 

Example 1:

Input: matrix = {{1,2,9},{5,3,8},{4,6,7}}
Output: 7
Explanation: The longest increasing path is
{1,2,3,6,7,8,9}.



def longestIncreasingPath(matrix):
    if not matrix:
        return 0

    def dfs(x, y, prev_val):
        if x < 0 or x >= len(matrix) or y < 0 or y >= len(matrix[0]) or matrix[x][y] <= prev_val:
            return 0

        if dp[x][y] > 0:
            return dp[x][y]

        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        max_length = 0

        for dx, dy in directions:
            max_length = max(max_length, 1 + dfs(x + dx, y + dy, matrix[x][y]))

        dp[x][y] = max_length
        return max_length

    max_length = 0
    dp = [[0] * len(matrix[0]) for _ in range(len(matrix)]

    for i in range(len(matrix)):
        for j in range(len(matrix[0]):
            max_length = max(max_length, dfs(i, j, -1))

    return max_length

# Example
matrix = [[1, 2, 9], [5, 3, 8], [4, 6, 7]]
result = longestIncreasingPath(matrix)
print(result)
